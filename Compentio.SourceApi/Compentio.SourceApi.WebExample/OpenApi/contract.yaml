openapi: 3.0.3

info:
  title: FX Transactions
  version: 1.0.0
  description: API definition for operations initiating various foreign exchange transactions.

paths:
  /spot:
    post:
      security:
        - BearerJWT: []
      operationId: initiateSpotTransaction
      description: "Starts a transaction for a spot trade."
      parameters:
        - in: header
          name: Idempotency-Key
          description: "Unique ID of the operation to ensure its idempotency."
          required: false
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Spot request data."
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/SpotRequest'
      tags:
        - Transaction
      responses:
        201:
          description: "Success."
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/400_ErrorResponse'
        401:
          $ref: '#/components/responses/401_ErrorResponse'
        403:
          $ref: '#/components/responses/403_ErrorResponse'
        500:
          $ref: '#/components/responses/500_ErrorResponse'

    get:
      security:
        - BearerJWT: []
      operationId: getSpotTransactions
      description: "Returns SPOT transactions with defined spot status and defined swift status."
      parameters:
        - in: query
          name: swiftStatus
          schema:
            $ref: "#/components/schemas/TransactionStatus"
        - in: query
          name: spotStatus
          schema:
            $ref: "#/components/schemas/TransactionStatus"
        - in: query
          name: minCreationDate
          schema:
            type: string
            format: date
        - in: query
          name: maxCreationDate
          schema:
            type: string
            format: date
        - in: query
          name: channel
          schema:
            $ref: "#/components/schemas/TransactionChannel"
        - in: query
          name: spotTransactionType
          schema:
            $ref: "#/components/schemas/TransactionType"
        - in: query
          name: onlySpotWithSwift
          schema:
            type: boolean
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
      tags:
        - Transaction
      responses:
        200:
          description: "Success."
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SpotTransactionResponse'
        400:
          $ref: '#/components/responses/400_ErrorResponse'
        401:
          $ref: '#/components/responses/401_ErrorResponse'
        403:
          $ref: '#/components/responses/403_ErrorResponse'
        500:
          $ref: '#/components/responses/500_ErrorResponse'

  /spot/{paymentId}/swift:
    put:
      security:
        - BearerJWT: []
      operationId: updateSwiftInSpotTransaction
      description: "Provide a new SWIFT request for a SPOT+SWIFT transaction for which prior SWIFT has failed."
      parameters:
        - in: header
          name: Idempotency-Key
          description: "Unique ID of the operation to ensure its idempotency."
          schema:
            type: string
            format: uuid
          required: false
        - in: path
          name: paymentId
          description: "ID of a previously-created SPOT+SWIFT payment to attach this SWIFT to"
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: "Swift request data."
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/SwiftRequest'
      tags:
        - Transaction
      responses:
        200:
          description: "Success."
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/400_ErrorResponse'
        401:
          $ref: '#/components/responses/401_ErrorResponse'
        403:
          $ref: '#/components/responses/403_ErrorResponse'
        404:
          $ref: '#/components/responses/404_ErrorResponse'
        500:
          $ref: '#/components/responses/500_ErrorResponse'

  /swift:
    post:
      security:
        - BearerJWT: []
      operationId: initiateSwiftTransaction
      description: "Starts a transaction for a SWIFT transfer."
      parameters:
        - in: header
          name: Idempotency-Key
          description: "Unique ID of the operation to ensure its idempotency."
          schema:
            type: string
            format: uuid
          required: false
      requestBody:
        description: "Swift request data."
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/SwiftRequest'
      tags:
        - Transaction
      responses:
        201:
          description: "Success."
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/400_ErrorResponse'
        401:
          $ref: '#/components/responses/401_ErrorResponse'
        403:
          $ref: '#/components/responses/403_ErrorResponse'
        500:
          $ref: '#/components/responses/500_ErrorResponse'
    get:
      security:
        - BearerJWT: []
      operationId: getSwiftTransactions
      description: "Returns SWIFT transactions that are standalone and in specific date range for customerId and currency with status successful."
      parameters:
        - in: query
          name: customerId
          schema:
            type: string
        - in: query
          name: currency
          schema:
            type: string
            maxLength: 3
        - in: query
          name: minExecutionDate
          schema:
            type: string
            format: date
        - in: query
          name: maxExecutionDate
          schema:
            type: string
            format: date
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
      tags:
        - Transaction
      responses:
        200:
          description: "Success."
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SwiftTransactionResponse'
        400:
          $ref: '#/components/responses/400_ErrorResponse'
        401:
          $ref: '#/components/responses/401_ErrorResponse'
        403:
          $ref: '#/components/responses/403_ErrorResponse'
        500:
          $ref: '#/components/responses/500_ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BearerJWT:
      type: apiKey
      in: header
      name: Authorization

  responses:
    400_ErrorResponse:
      description: "One of the parameters is missing or is invalid."
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    401_ErrorResponse:
      description: "Unauthorized. The request requires user authentication."
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    403_ErrorResponse:
      description: "Current user is not permitted to access this functionality"
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    404_ErrorResponse:
      description: "Referenced resource not found."
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    500_ErrorResponse:
      description: "Unexpected internal server error when processing the request."
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    TransactionStatus:
      type: string
      enum:
        - RECEIVED
        - EXECUTED
        - WAIT_FOR_APPROVAL
        - WAIT_FOR_SESSION
        - REJECTED
        - FAILED
    TransactionChannel:
      description: "Transaction channel. Only 'FAIRO' and 'RBO' are currently available"
      type: string
      default: FAIRO
      enum:
        - FAIRO
        - RBO
    TransactionType:
      type: string
      enum:
        - BUY
        - SELL
        - CONVERSION
    ValueDate:
      type: string
      default: TOD
      enum:
        - TOD
        - TOM
        - SPOT
    RateCalculationAlgorithm:
      description: "Rate calculation algorithm type."
      type: string
      default: QUOTED
      enum:
        - QUOTED
        - BANK_DECIDES
        - CUSTOMER_DECIDES

    SpotRequest:
      type: object
      description: "Description of SPOT transactions to be executed."
      properties:
        channel:
          $ref: "#/components/schemas/TransactionChannel"
        spotPayment:
          type: string
          description: "Digitally signed SPOT payment details. See SpotPayment model for description of decoded form."
        swiftPayment:
          type: string
          description: "Digitally signed SWIFT payment details. This payment will be executed after a successful FX payment. Required for exchange operation where credit currency is UAH.\n\nNOTE: Currently SWIFT payments are not supported and this field should be omitted."
          example: null
        debtorDetails:
          $ref: "#/components/schemas/DebtorDetails"
      required:
        - spotPayment
        - debtorDetails

    SwiftRequest:
      type: object
      description: "Description of SWIFT transactions to be executed."
      properties:
        channel:
          $ref: "#/components/schemas/TransactionChannel"
        swiftPayment:
          type: string
          description: "Digitally signed SWIFT payment details. See SwiftPayment model for description of decoded form."
        debtorDetails:
          $ref: "#/components/schemas/DebtorDetails"
      required:
        - swiftPayment
        - debtorDetails

    SpotPayment:
      type: object
      description: "Decoded contents of spotPayment field. Provided for reference only, this object should be encoded and digitally signed."
      properties:
        creditorAccount:
          $ref: "#/components/schemas/Account"
        debtorAccount:
          $ref: "#/components/schemas/Account"
        debtorName:
          type: string
          description: "The Party whose account is debited with the payment."
          example: "КУКРІ ОЛЕКСАНДР СТЕПАНОВИЧ"
        instructedAmount:
          $ref: "#/components/schemas/TransactionAmount"
        equivalentAmount:
          $ref: "#/components/schemas/TransactionAmount"
        paymentIdentification:
          $ref: "#/components/schemas/PaymentIdentification"
        customerRateId:
          type: string
          description: "ID of the customer rate to be used as an exchange rate of this transaction. Mandatory for rateCalculationAlgorithm == QUOTED"
          example: "58038e_BID_B_REGULAR"
        tariffGroupId:
          type: string
          description: "ID of the tariff group used to calculate an exchange rate of this transaction. Mandatory for rateCalculationAlgorithm == BANK_DECIDES."
          example: "Retail"
        rateCalculationAlgorithm:
          $ref: "#/components/schemas/RateCalculationAlgorithm"
        taxAmount:
          type: number
          description: "Amount of pension fee or other taxes need to paid within the payment. Zero if no tax applied."
          example: "0.00"
        purposeCode:
          type: string
          description: "3 letter code to indicate FX reasons for sale/purchase. Optional for exchange operation where both credit and debit accounts are not UAH accounts."
          example: "211"
        contractDate:
          type: string
          format: date
          description: "Contract date required for purchase operations (debit account is UAH account)"
        contractNumber:
          type: string
          description: "Textual contract number identifier required for purchase operation (debit account is UAH account)."
          example: "01/N/52/009-ACK"
        valueDate:
          $ref: "#/components/schemas/ValueDate"
      required:
        - creditorAccount
        - debtorAccount
        - debtorName
        - instructedAmount
        - paymentIdentification
        - taxAmount

    SwiftPayment:
      type: object
      description: "Decoded contents of swiftPayment field. Provided for reference only, this object should be encoded and digitally signed."
      properties:
        creditorAccount:
          $ref: "#/components/schemas/InternationalAccount"
        creditorBank:
          $ref: "#/components/schemas/BankDetails"
        creditorName:
          type: string
          description: "The Party whose account is credited  with the payment."
          maxLength: 40
          example: "КУКРІ ОЛЕКСАНДР СТЕПАНОВИЧ"
        creditorDetails:
          $ref: "#/components/schemas/CreditorDetails"
        debtorAccount:
          $ref: "#/components/schemas/Account"
        debtorBank:
          $ref: "#/components/schemas/BankDetails"
        chargesDetails:
          $ref: "#/components/schemas/ChargesDetails"
        debtorExpenseAccount:
          $ref: "#/components/schemas/Account"
        debtorName:
          type: string
          description: "The Party whose account is debited with the payment."
          maxLength: 40
          example: "КУКРІ ОЛЕКСАНДР СТЕПАНОВИЧ"
        intermediaryBank:
          $ref: "#/components/schemas/BankDetails"
        instructedAmount:
          $ref: "#/components/schemas/TransactionAmount"
        paymentIdentification:
          $ref: "#/components/schemas/PaymentIdentification"
        paymentDetails:
          $ref: "#/components/schemas/SwiftPaymentDetails"
      required:
        - creditorAccount
        - creditorBank
        - creditorName
        - creditorDetails
        - debtorAccount
        - debtorBank
        - chargesDetails
        - debtorExpenseAccount
        - debtorName
        - instructedAmount
        - paymentIdentification
        - paymentDetails

    Account:
      type: object
      description: "Account for a party of a transaction."
      properties:
        currency:
          type: string
          description: "ISO 4217 Alpha 3 currency code for the currency this account is in."
          maxLength: 3
          example: "UAH"
        identification:
          $ref: "#/components/schemas/AccountIdentification"
      required:
        - currency
        - identification

    AccountIdentification:
      type: object
      properties:
        iban:
          type: string
          description: "ISO 13616 International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer."
          maxLength: 29
          example: "UA583314010000026003542143540"
      required:
        - iban

    InternationalAccount:
      type: object
      description: "Account (international) for a party of a transaction."
      properties:
        currency:
          type: string
          description: "ISO 4217 Alpha 3 currency code for the currency this account is in."
          maxLength: 3
          example: "UAH"
        identification:
          $ref: "#/components/schemas/InternationalAccountIdentification"
      required:
        - currency
        - identification

    InternationalAccountIdentification:
      type: object
      properties:
        iban:
          type: string
          description: "ISO 13616 International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Either this or account must be provided."
          maxLength: 29
          example: "UA583314010000026003542143540"
        otherIdentification:
          type: string
          description: "Account number in an other identification scheme than IBAN. Either this or iban must be provided."
          maxLength: 50

    BankDetails:
      type: object
      properties:
        bankAccount:
          type: string
          description: "Bank account. Intermediary account that belongs to the bank and not to creditor or debtor."
          maxLength: 35
        bicType:
          type: string
          description: "BIC type"
          enum:
            - A
            - D
        bic:
          type: string
          description: "BIC number"
          maxLength: 15
        clearingCodeType:
          type: string
          description: "Clearing code type"
          maxLength: 2
        clearingCode:
          type: string
          description: "Clearing code"
          maxLength: 23
        name:
          type: string
          description: "Bank's name"
          maxLength: 140
        countryCode:
          type: string
          description: "Bank's ISO country code"
          maxLength: 3
        city:
          type: string
          description: "Bank's city"
          maxLength: 70
        address:
          type: string
          description: "Bank's address"
          maxLength: 140
      required:
        - bicType
        - bic
        - name
        - countryCode
        - city
        - address

    ChargesDetails:
      type: object
      description: "Details of Charges"
      properties:
        chargeOption:
          type: string
          enum:
            - OUR
            - SHA
            - BEN
          description: "Charge option (party paying commission). Possible values: OUR (debtor covers all charges), SHA (shared) or BEN (beneficiary - all fees are paid by the creditor)."
        isGuaranteedOUR:
          type: boolean
          description: "Indicate if Guaranteed OUR service (available for US banks) is included"
      required:
        - chargeOption

    TransactionAmount:
      type: object
      description: "Transaction currency and amount. Base currency should be provided for instructedAmount, term currency should be provided for equivalentAmount."
      properties:
        amount:
          type: number
          description: "The amount given with 2 fractional digits, where fractions must be compliant to the currency definition. The decimal separator is a dot."
          example: "12.00"
        currency:
          type: string
          description: "ISO 4217 Alpha 3 currency code."
          maxLength: 3
          example: "EUR"
      required:
        - amount
        - currency

    ParticipantDetails:
      type: object
      description: "Transaction participant's personal details"
      properties:
        countryCode:
          type: string
          description: "ISO country code for country of residence"
          maxLength: 3
        city:
          type: string
          description: "City of residence"
          maxLength: 70
        address:
          type: string
          description: "Street address"
          maxLength: 80
        identification:
          type: string
          description: "Identification document's number (passport or ID)"
          maxLength: 60
        taxId:
          type: string
          description: "The client tax id (ИНН number)."
          maxLength: 12
          example: "3167700453"
        isResident:
          type: boolean
          description: "Indicate if the client is resident or not"
      required:
        - countryCode

    CreditorDetails:
      allOf:
        - $ref: "#/components/schemas/ParticipantDetails"
        - type: object
          required:
            - address

    DebtorDetails:
      allOf:
        - $ref: "#/components/schemas/ParticipantDetails"
        - type: object
          required:
            - taxId
            - isResident

    PaymentIdentification:
      type: object
      description: "Set of IDs of the related Payment."
      properties:
        transactionIdentification:
          type: string
          description: "The ID of the transaction."
          example: "58532327"
        endToEndIdentification:
          type: string
          description: "The global ID of the transaction across all systems involved."
          example: "ks19753tn8s7q23"
      required:
        - transactionIdentification
        - endToEndIdentification

    SwiftPaymentDetails:
      type: object
      description: "Additional payment details"
      properties:
        currencyDate:
          type: string
          format: date
          description: "Payment booking date"
        description:
          type: string
          maxLength: 220
          description: "Payment purpose"
        additionalDescription:
          type: string
          maxLength: 210
          description: "Additional payment information"
        documentNumber:
          type: string
          description: "Document number"
          maxLength: 10
        documentDate:
          type: string
          format: date
          description: "Document date"
        hasDocumentAttachments:
          type: boolean
          description: "Indicate if document encloses attachments or not"
        operationCode:
          type: string
          maxLength: 7
          description: "Operation code (Code 1-PB)"
          example: "2353011"
        purposeCode:
          type: string
          minLength: 3
          maxLength: 3
          description: "Operation purpose code (Code F090)"
          example: "101"
      required:
        - description
        - documentNumber
        - documentDate
        - operationCode
        - purposeCode
    SwiftTransactionResponse:
      type: array
      items:
        $ref: '#/components/schemas/SwiftTransaction'
    BaseTransaction:
      type: object
      properties:
        paymentId:
          type: string
          description: "Payment id generated by FX service"
          format: uuid
        paymentIdentification:
          $ref: "#/components/schemas/PaymentIdentification"
        creationDate:
          type: string
          format: date-time
          description: "Date time when transaction was created"
        executionDate:
          type: string
          format: date-time
          description: "Execution Date"
        instructedAmount:
          $ref: "#/components/schemas/TransactionAmount"
        channel:
          $ref: "#/components/schemas/TransactionChannel"
        debtorDetails:
          $ref: "#/components/schemas/DebtorDetailsResponse"
        debtorAccount:
          $ref: "#/components/schemas/Account"
        creditorAccount:
          $ref: "#/components/schemas/Account"

    SwiftTransaction:
      type: object
      properties:
        invoice:
          type: string
          description: "Agreement/invoice for SWIFT"
        invoiceDate:
          type: string
          format: date
          description: "Date of agreement/invoice for SWIFT"
      allOf:
        - $ref: '#/components/schemas/BaseTransaction'

    SpotTransactionResponse:
      type: array
      items:
        $ref: '#/components/schemas/SpotTransaction'

    SpotTransaction:
      type: object
      properties:
        lastDateForPayment:
          type: string
          format: date
          description: "Last day for payment"
        daysLeft:
          type: integer
          description: "Days left for payment"
        rateCalculationAlgorithm:
          $ref: '#/components/schemas/RateCalculationAlgorithm'
        equivalentAmount:
          $ref: "#/components/schemas/TransactionAmount"
        transactionRate:
          type: number
          description: "Rate value used in the transaction. equivalentAmount = transactionRate * instructedAmount"
          example: "30.5145"
        invoice:
          type: string
          description: "Agreement/invoice for purchase"
        invoiceDate:
          type: string
          format: date
          description: "Date of agreement/invoice for purchase"
        valueDate:
          $ref: '#/components/schemas/ValueDate'
        spotStatus:
          $ref: '#/components/schemas/TransactionStatus'
        orderId:
          type: integer
          format: int64
          description: "ID of the associated foreign exchange trade order."
        tariffGroupId:
          type: string
          description: "Tariff group Id"
      allOf:
        - $ref: '#/components/schemas/BaseTransaction'

    DebtorDetailsResponse:
      type: object
      properties:
        taxCode:
          type: string
          description: "Debtor's tax code"
        customerId:
          type: string
          description: "Debtor's Fairo Id"
        name:
          type: string
          description: "Debtor's name"
        businessSegment:
          type: string
          description: "Business segment of debtor"
        customerSegment:
          type: string
          description: "Customer segment of customer"

    SuccessResponse:
      type: object
      properties:
        paymentId:
          type: string
          description: "Identifier of the payment."
      required:
        - paymentId

    ErrorMessage:
      type: object
      properties:
        category:
          type: string
          description: "Message severity category"
        code:
          type: string
          description: "Enumerated code describing the error."
          enum:
            - PARAMETER_NOT_SUPPORTED
            - FORMAT_ERROR
            - SERVICE_INVALID
            - OPERATION_FAILED
        errorCode:
          type: string
          description: "Detailed error code, may provide more information than the more general code parameter. Optional."
        errorReason:
          type: string
          description: "Detailed error reason, may provide more information than the more general code parameter. Optional."
        path:
          type: string
          description: "In case of parameter or format errors, will provide a path identifying the parameter in question. Optional."
        text:
          type: string
          description: "Additional explaining text."
      required:
        - category
        - code

    ErrorResponse:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
          description: "List of processing error messages."
